from typing import List

from backend.bot.utils.habit_tools import HABIT_PERIOD_NAMES, get_completed_record_sum, \
    get_last_record_status, HABIT_PERIOD_NAMES_INTERVAL
from backend.bot.utils.parse_markdown_text import parse_for_markdown
from backend.control_plane.schemas import ReminderSchema
from backend.control_plane.schemas.habit import HabitSchemaResponse


def get_reminder(reminder: ReminderSchema):
    text = (f"{reminder.text} {reminder.tag}:\n\n"
            f"   {reminder.time}")


def get_reminders(reminders, next_coef: int, strip: dict, day: str, tag_filter):
    strip = [index + 5 * next_coef for index in strip]

    day_emoji = {
        "today": "üèû",
        "tomorrow": "üåÖ",
        "all": "üåÑ"
    }

    day_dict = {
        "today": "–°–µ–≥–æ–¥–Ω—è",
        "tomorrow": "–ó–∞–≤—Ç—Ä–∞",
        "all": "–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    }

    text = f"*{day_emoji[day]} {day_dict[day]}{"  (" + tag_filter + ")" if tag_filter != None else ":"}*\n"

    added_lines_count = 0
    for id, reminder in enumerate(reminders):
        if id in range(*strip):
            if reminder["status"] == "complete":  # –≤—ã–ø–æ–ª–Ω–µ–Ω–æ - strike
                text += f"~{str(id + 1)}) {reminder['text'].capitalize()}~\n"
            else:
                text += f"{str(id + 1)}) {reminder['text'].capitalize()} ({reminder["time"]})\n"
            added_lines_count += 1

    if not added_lines_count:
        text = ''.join(text.split("\n")[:-2]) + f"\n\n{day_emoji[day]} "
        if tag_filter:
            text += f"*–ó–∞–¥–∞—á ({tag_filter}) –Ω–µ—Ç.*\n"
        elif tag_filter != "all":
            text += "*–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –∑–∞–¥–∞—á, –º–æ–∂–µ—Ç–µ –æ—Ç–¥—ã—Ö–∞—Ç—å.*\n"
        else:
            text += f"*–ù–∞ {day_dict[day]} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.*\n"

    if added_lines_count:
        text += "\n–í—ã–±–µ—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"
    else:
        text += "–ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É!"

    return parse_for_markdown(text)


def get_tags(tags, new_tag: bool = False):
    text = "üîç –í–∞—à–∏ —Ç—ç–≥–∏:\n\n"

    for i, tag in enumerate(tags):
        text += f"{i + 1}) {tags[tag]["emoji"]}  ‚Äì {tags[tag]["name"]}\n"
    if new_tag:
        text += "\n–ö–∞–∫–æ–µ —ç–º–æ–¥–∑–∏ –±—É–¥–µ—Ç —É –Ω–æ–≤–æ–≥–æ —Ç—ç–≥–∞?"
    else:
        text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—ç–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"

    return text


def get_habits(habits: List[HabitSchemaResponse]):
    text = "üéØ –í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"

    for index, habit in enumerate(habits):
        text += f"{index + 1}. {habit.text}: ({get_completed_record_sum(habit=habit)} —Ä–∞–∑ –∑–∞ {HABIT_PERIOD_NAMES[habit.interval]})\n"

    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É:"
    return parse_for_markdown(text)


def get_habit(habit: HabitSchemaResponse):
    text = (f'–ü—Ä–∏–≤—ã—á–∫–∞ "{habit.text}":\n'
            f"    –∑–∞ {HABIT_PERIOD_NAMES[habit.interval]}: {get_completed_record_sum(habit=habit)} —Ä–∞–∑\n\n")

    text += (f"{HABIT_PERIOD_NAMES_INTERVAL[habit.interval].capitalize()} –≤—ã "
             f"{get_last_record_status(habit=habit)} –ø—Ä–∏–≤—ã—á–∫—É {get_last_record_status(habit=habit, emoji_flag=True)}")
    return parse_for_markdown(text)