from collections.abc import Coroutine
from datetime import datetime

from backend.bot.clients.remindme_api import client


def get_message_reminder(data: dict):
    pass


def get_message_reminders(data: dict):
    reminders = sorted(client.get_reminders(data), key=lambda x: x["time_exp"])

    next_coef = data["next_coef"]

    strip = [index + 5 * next_coef for index in data['strip']]
    day = data["day"]

    text = "üìù *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è* \n\n"

    day_emoji = {
        "today": "üèû",
        "tomorrow": "üåÖ",
        "all": "üåÑ"
    }

    day_dict = {
        "today": "–°–µ–≥–æ–¥–Ω—è",
        "tomorrow": "–ó–∞–≤—Ç—Ä–∞",
        "all": "–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    }

    text += f"*{day_emoji[day]} {day_dict[day]}{"  ("+data["tag_filter"]+")" if data["tag_filter"] != None else ":"}*\n"

    added_lines_count = 0
    for id, reminder in enumerate(reminders):
        if id in range(*strip):
            if reminder["state"]:
                text += f"~{str(id + 1)}) {reminder['text'].capitalize()}~\n"
            else:
                text += f"{str(id + 1)}) {reminder['text'].capitalize()} ({reminder["time_exp"]})\n"
            added_lines_count += 1
    if not added_lines_count:
        text = ''.join(text.split("\n")[:-2]) + f"\n\n{day_emoji[day]} "
        if data["tag_filter"]:
            text += f"*–ó–∞–¥–∞—á ({data["tag_filter"]}) –Ω–µ—Ç.*\n"
        elif data["day_filter"] != "all":
            text += "*–í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ—Ç –∑–∞–¥–∞—á, –º–æ–∂–µ—Ç–µ –æ—Ç–¥—ã—Ö–∞—Ç—å.*\n"
        else:
            text += f"*–ù–∞ {day_dict[day]} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç.*\n"

    if added_lines_count:
        text += "\n–í—ã–±–µ—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!"
    else:
        text += "–ü–æ–ø—Ä–æ–±—É–π –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É!"

    return (text.replace(")", "\)").replace(".", "\n").
            replace("-", "\-").replace("!", "\!")).replace("(", "\(")


def get_tags_edit(data: dict):
    text = "üîç –í–∞—à–∏ —Ç—ç–≥–∏:\n\n"

    tags = client.get_tags()
    dick = ["–Ø—Å–Ω–æ—Å—Ç—å", "–ö–æ—à–∫–∏", "–ó–Ω–∞–Ω–∏—è", "–ó–∞–ø–∏—Å–∫–∏", "–ò–¥–µ–∏"]
    for i, tag in enumerate(tags):
        text += f"{i+1}\) {dick[i]}  {tag}\n"

    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—ç–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"

    return text


def get_message_habits(data: dict):
    habits = client.get_habits(data)

    today = datetime.now()
    current_month = today.strftime("%B")
    months_ru = {
        "January": "–Ø–Ω–≤–∞—Ä—å",
        "February": "–§–µ–≤—Ä–∞–ª—å",
        "March": "–ú–∞—Ä—Ç",
        "April": "–ê–ø—Ä–µ–ª—å",
        "May": "–ú–∞–π",
        "June": "–ò—é–Ω—å",
        "July": "–ò—é–ª—å",
        "August": "–ê–≤–≥—É—Å—Ç",
        "September": "–°–µ–Ω—Ç—è–±—Ä—å",
        "October": "–û–∫—Ç—è–±—Ä—å",
        "November": "–ù–æ—è–±—Ä—å",
        "December": "–î–µ–∫–∞–±—Ä—å"
    }

    text = "üéØ –í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n\n"
    for index, habit in enumerate(habits):
        text += "‚úÖ " if habit["status"] else "‚ùå "

        text_progress = f"{months_ru[current_month]}" if habit["period"] == "month" else "–Ω–µ–¥–µ–ª—é"
        text += f"{index+1}) {habit["habit_text"]} ({habit["progress"]} —Ä–∞–∑ –∑–∞ {text_progress})\n"

    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    return (text.replace(")", "\)").replace(".", "\n").
            replace("-", "\-").replace("!", "\!")).replace("(", "\(")
