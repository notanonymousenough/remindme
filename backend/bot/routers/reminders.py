from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from aiogram.types import Message, CallbackQuery
from backend.bot.keyboards import inline_kbs, reply_kbs
from backend.bot.routers import start

from backend.bot.utils import get_message_reminders
from backend.bot.utils.message_text_tools import get_tags_edit
from backend.bot.utils.states import States

from backend.bot.clients import client

reminders_router = Router()


@reminders_router.message(StateFilter(States.reminder_menu),
                          F.text == "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—ç–≥–∏")
async def tags_edit(message: Message, state: FSMContext):
    data = await state.get_data()
    text = get_tags_edit(data=data)

    await message.answer(text=text,
                         reply_markup=inline_kbs.tag_menu_get_tags(data),
                         parse_mode="MarkdownV2")


@reminders_router.message(StateFilter(States.reminder_menu),
                          F.text == "–ù–∞–∑–∞–¥")
async def return_to_menu(message: Message, state: FSMContext):
    await state.set_state(States.start_menu)

    await message.answer(text="return to menu", reply_markup=reply_kbs.main_menu())


@reminders_router.callback_query(StateFilter(States.reminder_menu),
                                 F.data.startswith("reminder_next_"))
async def reminders_next(call: CallbackQuery, state: FSMContext):
    next_coef = int(call.dict()["data"].split("_")[-1])
    await state.update_data(next_coef=next_coef)

    data = await state.get_data()
    text = get_message_reminders(data=data)

    await call.message.edit_text(text=text,
                                 reply_markup=inline_kbs.reminders_buttons(data=data),
                                 parse_mode="MarkdownV2")


@reminders_router.callback_query(StateFilter(States.reminder_menu),
                                 F.data.startswith("reminder_previous_"))
async def reminders_previous(call: CallbackQuery, state: FSMContext):
    next_coef = int(call.dict()["data"].split("_")[-1])
    await state.update_data(next_coef=next_coef)

    data = await state.get_data()
    text = get_message_reminders(data=data)

    await call.message.edit_text(text=text,
                                 reply_markup=inline_kbs.reminders_buttons(data=data),
                                 parse_mode="MarkdownV2")


@reminders_router.callback_query(StateFilter(States.reminder_menu),
                                 F.data.startswith("reminder_day_filter_"))
async def reminders_day_filter(call: CallbackQuery, state: FSMContext):
    new_day = call.dict()["data"].split("_")[-1]

    await state.update_data(day=new_day)
    await state.update_data(next_coef=0)

    data = await state.get_data()
    text = get_message_reminders(data=data)

    await call.message.edit_text(text=text,
                                 reply_markup=inline_kbs.reminders_buttons(data=data),
                                 parse_mode="MarkdownV2")


@reminders_router.callback_query(StateFilter(States.reminder_menu),
                                 F.data == "reminder_tag_filter")
async def reminder_tag_filter(call: CallbackQuery, state: FSMContext):
    await state.update_data(tag_filter_click=1)

    data = await state.get_data()
    text = get_message_reminders(data)

    await call.message.edit_text(text=text,
                                 reply_markup=inline_kbs.reminders_buttons(data=data),
                                 parse_mode="MarkdownV2")


@reminders_router.callback_query(StateFilter(States.reminder_menu),
                                 F.data.startswith("reminder_tag_filter_back"))
async def reminder_tags_select(call: CallbackQuery, state: FSMContext):
    tag_filter = None
    tag_filter_click = 0
    await state.update_data(tag_filter=tag_filter)
    await state.update_data(tag_filter_click=tag_filter_click)

    data = await state.get_data()
    text = get_message_reminders(data)

    await call.message.edit_text(text=text,
                                 reply_markup=inline_kbs.reminders_buttons(data=data),
                                 parse_mode="MarkdownV2")


@reminders_router.callback_query(StateFilter(States.reminder_menu),
                                 F.data.startswith("reminder_tag_filter_"))
async def reminder_tags_select(call: CallbackQuery, state: FSMContext):
    tag_filter = call.dict()["data"].split("_")[-1]
    await state.update_data(tag_filter=tag_filter)

    data = await state.get_data()
    text = get_message_reminders(data)

    await call.message.edit_text(text=text,
                                 reply_markup=inline_kbs.reminders_buttons(data=data),
                                 parse_mode="MarkdownV2")


@reminders_router.callback_query(StateFilter(States.reminder_menu),
                                 F.data.startswith("reminder_edit_"))
async def reminder_edit(call: CallbackQuery, state: FSMContext):
    pass


@reminders_router.message(StateFilter(States.reminder_menu),
                          F.text == "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def add_reminder(message: Message, state: FSMContext):
    await state.update_data(add_reminder=1)

    text = ("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∫–æ–≥–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ –Ω—ë–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å. \n\n"
            "–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç—ç–≥ –≤ –≤–∏–¥–µ —ç–º–æ–¥–∑–∏, —Å –∫–æ—Ç–æ—Ä—ã–º —É –≤–∞—Å –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è –≤–∞—à–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n ‚Äî –ó–∞–≤—Ç—Ä–∞ –∫—É–ø–∏—Ç—å —Å–∏–≥–∞—Ä–µ—Ç—ã üö¨\n ‚Äî 11 –∏—é–ª—è –≤—Å—Ç—Ä–µ—á–∞ –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–æ–≤ –≤ 9 –≤–µ—á–µ—Ä–∞ üëî")
    await message.answer(text=text)


@reminders_router.message(StateFilter(States.reminder_menu))
async def add_reminder_check(message: Message, state: FSMContext):  # –ó–ê–ì–õ–£–®–ö–ê –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.text in ['–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', '–ù–∞–∑–∞–¥', "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç—ç–≥–∏"]:
        return

    reminder = message.text
    await message.answer(text=f"{reminder}\n\n–ó–¥–µ—Å—å –≤—Å—ë –≤–µ—Ä–Ω–æ?",
                         reply_markup=inline_kbs.add_reminder_check(),
                         parse_mode="MarkdownV2")


@reminders_router.callback_query(StateFilter(States.reminder_menu),
                                 F.data.startswith("reminder_check_"))
async def add_reminder_check_answer(call: CallbackQuery, state: FSMContext):  # –ó–ê–ì–õ–£–®–ö–ê –∑–∞–∫–∏–Ω—É—Ç—å –≤ –∞–ø–∏
    await state.update_data(add_reminder=0)

    answer = call.dict()["data"].split("_")[-1]
    if answer == "OK":
        # add to remindme_api

        text = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ\!"
        await call.message.edit_text(text=text,
                                     parse_mode="MarkdownV2")
    else:
        await call.message.delete()

    await start.reminders(message=call.message, state=state)
