"""
–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
"""
import logging
import asyncio
from datetime import datetime, timedelta
from temporalio import activity
from typing import List, Dict, Any
from uuid import UUID

from app.db.engine import async_session
from app.db.repositories.reminder import ReminderRepository
from app.db.repositories.user import UserRepository
from app.db.models.base import ReminderStatus
from ..services.telegram_service import TelegramService

logger = logging.getLogger("reminder_activities")


@activity.defn
async def check_active_reminders() -> List[Dict[str, Any]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

    now = datetime.now()
    reminder_window = now + timedelta(minutes=5)  # –°–º–æ—Ç—Ä–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 5 –º–∏–Ω—É—Ç

    async with async_session() as session:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        reminder_repo = ReminderRepository(session)

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ
        active_reminders = await reminder_repo.get_reminders_in_time_window(
            start_time=now,
            end_time=reminder_window,
            status=ReminderStatus.ACTIVE,
            notification_sent=False
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        reminders_to_send = []
        for reminder in active_reminders:
            reminder_data = {
                "id": str(reminder.id),
                "user_id": str(reminder.user_id),
                "text": reminder.text,
                "time": reminder.time.isoformat()
            }
            reminders_to_send.append(reminder_data)

            # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            await reminder_repo.update(reminder.id, notification_sent=True)

        return reminders_to_send


@activity.defn
async def mark_reminder_as_forgotten(reminder_id: str) -> bool:
    """
    –û—Ç–º–µ—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –∑–∞–±—ã—Ç–æ–µ
    """
    logger.info(f"–û—Ç–º–µ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id} –∫–∞–∫ –∑–∞–±—ã—Ç–æ–µ")

    async with async_session() as session:
        reminder_repo = ReminderRepository(session)
        result = await reminder_repo.mark_as_forgotten(UUID(reminder_id))
        return result is not None


@activity.defn
async def send_telegram_notification(user_id: str, reminder_id: str, text: str, time: str) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ Telegram
    """
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}")

    reminder_time = datetime.fromisoformat(time)

    async with async_session() as session:
        user_repo = UserRepository(session)
        user = await user_repo.get(UUID(user_id))

        if not user or not user.telegram_id:
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ Telegram")
            return False

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}\n‚è∞ –í—Ä–µ–º—è: {reminder_time.strftime('%H:%M')}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        buttons = [
            [{"text": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", "callback_data": f"reminder_complete:{reminder_id}"}],
            [{"text": "‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 15 –º–∏–Ω—É—Ç", "callback_data": f"reminder_postpone:{reminder_id}:15"}],
            [{"text": "‚è∞ –û—Ç–ª–æ–∂–∏—Ç—å –Ω–∞ 1 —á–∞—Å", "callback_data": f"reminder_postpone:{reminder_id}:60"}]
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        telegram_service = TelegramService()
        success = await telegram_service.send_message(
            user.telegram_id,
            message,
            reply_markup={"inline_keyboard": buttons}
        )

        return success
