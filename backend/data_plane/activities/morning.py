"""
–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≤—ã—á–∫–∞–º–∏
"""
import logging
import asyncio
from datetime import datetime, timedelta

from sqlalchemy.testing.suite.test_reflection import users
from temporalio import activity
from typing import List, Dict, Any
from uuid import UUID

from backend.control_plane.db.repositories.reminder import ReminderRepository
from backend.control_plane.db.repositories.user import UserRepository
from backend.control_plane.db.models.base import ReminderStatus
from backend.config import get_settings
from backend.data_plane.services.telegram_service import TelegramService

logger = logging.getLogger("morning_message_activities")


@activity.defn
async def get_active_users() -> List[str]:
    logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    user_repo = UserRepository()
    users = await user_repo.get_all_models()
    return list(map(lambda user: user.id, users))


@activity.defn
async def check_today_habits(user_id: str) -> List[Dict[str, Any]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫")
    reminder_repo = ReminderRepository()

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ
    active_reminders = await reminder_repo.take_for_sending(get_settings().ACTIVE_REMINDERS_LIMIT)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    reminders_to_send = []
    for reminder in active_reminders:
        reminder_data = {
            "id": str(reminder.id),
            "user_id": str(reminder.user_id),
            "text": reminder.text,
            "time": reminder.time.isoformat()
        }
        reminders_to_send.append(reminder_data)

        # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        await reminder_repo.mark_sent(reminder.id)

    return reminders_to_send


@activity.defn
async def check_today_reminders(user_id: str) -> List[Dict[str, Any]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
    """
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    reminder_repo = ReminderRepository()

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ
    active_reminders = await reminder_repo.take_for_sending(get_settings().ACTIVE_REMINDERS_LIMIT)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    reminders_to_send = []
    for reminder in active_reminders:
        reminder_data = {
            "id": str(reminder.id),
            "user_id": str(reminder.user_id),
            "text": reminder.text,
            "time": reminder.time.isoformat()
        }
        reminders_to_send.append(reminder_data)

        # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        await reminder_repo.mark_sent(reminder.id)

    return reminders_to_send

@activity.defn
async def send_telegram_message(user_id: str, habit_id: str, text: str, time: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ Telegram
    """
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    reminder_time = datetime.fromisoformat(time)
    user_repo = UserRepository()
    user = await user_repo.get_by_model_id(UUID(user_id))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message = f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}\n‚è∞ –í—Ä–µ–º—è: {reminder_time.strftime('%H:%M')}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    telegram_service = TelegramService()
    await telegram_service.send_message(
        user.telegram_id,
        message
    )
